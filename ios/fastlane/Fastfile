default_platform(:ios)

platform :ios do
  private_lane :verify_env do |options|
    envs = options.fetch(:envs, [])
  
    envs.each do |env|
      if ENV[env].nil? || ENV[env].empty?
        UI.user_error!("\"#{env}\" is not set; please set it in your environment variables")
      end
    end
  end

  lane :internal_testing do |options|
    verify_env(envs: [
      "ASC_KEY_ID",
      "ASC_ISSUER_ID",
      "ASC_KEY_P8_BASE64",
      "MATCH_PASSWORD",
      # "MATCH_GIT_BASIC_AUTHORIZATION",
    ])

    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8_BASE64"],
      is_key_content_base64: true,
      in_house: false
    )

    build_number = latest_testflight_build_number() + 1

    UI.message("syncing certificates and profiles")
    
    if is_ci
      UI.message("CI detected. Setting up CI environment")
      setup_ci
    end

    produce(
      app_identifier: "org.chai-solutions.chai",
      app_name: "GateSoup",

      enable_services: {
        push_notification: "on",
        app_group: "on",
      }
    )

    produce(
      app_identifier: "org.chai-solutions.chai.OneSignalNotificationServiceExtension",
      app_name: "GateSoup OneSignal",
      skip_itc: true,

      enable_services: {
        app_group: "on",
      }
    )

    match(
      app_identifier: ["org.chai-solutions.chai","org.chai-solutions.chai.OneSignalNotificationServiceExtension"],
      type: "appstore",
      readonly: is_ci,
    )

    root_dir = sh("git rev-parse --show-toplevel").strip
    sh("cd #{root_dir} && flutter build ipa --build-number #{build_number}")

    build_app(
      skip_build_archive: true,
      archive_path: "../build/ios/archive/Runner.xcarchive",
    )

    # upload_to_testflight(
    #   skip_waiting_for_build_processing: true
    # )
  end
end
